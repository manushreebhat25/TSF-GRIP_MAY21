# THE SPARKS FOUNDATION
# Manushree B
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sb
â€‹
 url="http://bit.ly/w-data"
 data=pd.read_csv(url)
data
print(data)
    Hours  Scores
0     2.5      21
1     5.1      47
2     3.2      27
3     8.5      75
4     3.5      30
5     1.5      20
6     9.2      88
7     5.5      60
8     8.3      81
9     2.7      25
10    7.7      85
11    5.9      62
12    4.5      41
13    3.3      42
14    1.1      17
15    8.9      95
16    2.5      30
17    1.9      24
18    6.1      67
19    7.4      69
20    2.7      30
21    4.8      54
22    3.8      35
23    6.9      76
24    7.8      86
data.info() 
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 25 entries, 0 to 24
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   Hours   25 non-null     float64
 1   Scores  25 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 528.0 bytes
Above is the 
# Above is the information about the given data
data.describe()
Hours	Scores
count	25.000000	25.000000
mean	5.012000	51.480000
std	2.525094	25.286887
min	1.100000	17.000000
25%	2.700000	30.000000
50%	4.800000	47.000000
75%	7.400000	75.000000
max	9.200000	95.000000
# Above is the Description of the given data
sb.scatterplot(x='Hours',y='Scores',data=data)
<AxesSubplot:xlabel='Hours', ylabel='Scores'>

Range
Range=data['Scores'].max()-data['Scores'].min()
print(Range)
78
from sklearn.model_selection import train_test_split
x=data['Hours']
y=data['Scores']
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,random_state=7)
xtrain.head()
12    4.5
0     2.5
23    6.9
6     9.2
20    2.7
Name: Hours, dtype: float64
from sklearn.linear_model import LinearRegression
lir=LinearRegression()
lir.fit(xtrain.values.reshape(-1,1),ytrain)
print("Complete")
Complete
ypred=lir.predict(xtest.values.reshape(-1,1))
print("Predicted")
Predicted
sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import mean_squared_error as mse
np.sqrt(mse(ypred,ytest))
4.864179014718323
from sklearn.metrics import mean_absolute_error as mae
mae(ypred,ytest)
4.556137724550894
sb.regplot(x=xtest,
sb.regplot(x=xtest,y=ytest)
print("Original plot is as follows")
Original plot is as follows

sb.regplot(x=xtest,y=ypred)
plt.ylabel("Scores")
print("Predicted plot is as follows")
Predicted plot is as follows

ccWhat will be predicted score if a student studies for 9.25 hrs/ day?
xnew=[[9.25]]
yf=lir.predict(xnew)
print("The predicted score if a student studies for 9.25 hrs/ day is {}".format(yf))
The predicted score if a student studies for 9.25 hrs/ day is [93.04378743]
